paths:
  /groups:
    post:
      tags:
        - group
      summary: Create a new instance of the model and persist it into the data source.
      operationId: group.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/group'
      deprecated: false
    put:
      tags:
        - group
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: group.upsert__put_groups
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/group'
      deprecated: false
    patch:
      tags:
        - group
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: group.upsert__patch_groups
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/group'
      deprecated: false
    get:
      tags:
        - group
      summary: Find all instances of the model matched by filter from the data source.
      operationId: group.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/group'
      deprecated: false
  /groups/replaceOrCreate:
    post:
      tags:
        - group
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: group.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/group'
      deprecated: false
  /groups/upsertWithWhere:
    post:
      tags:
        - group
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: group.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/group'
      deprecated: false
  '/groups/{id}/exists':
    get:
      tags:
        - group
      summary: Check whether a model instance exists in the data source.
      operationId: 'group.exists__get_groups_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/groups/{id}':
    head:
      tags:
        - group
      summary: Check whether a model instance exists in the data source.
      operationId: 'group.exists__head_groups_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - group
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: group.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/group'
      deprecated: false
    delete:
      tags:
        - group
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: group.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - group
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'group.prototype.updateAttributes__put_groups_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/group'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/group'
      deprecated: false
    patch:
      tags:
        - group
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'group.prototype.updateAttributes__patch_groups_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/group'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/group'
      deprecated: false
  '/groups/{id}/replace':
    post:
      tags:
        - group
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: group.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/group'
      deprecated: false
  /groups/findOne:
    get:
      tags:
        - group
      summary: Find first instance of the model matched by filter from the data source.
      operationId: group.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/group'
      deprecated: false
  /groups/update:
    post:
      tags:
        - group
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: group.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/group'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /groups/count:
    get:
      tags:
        - group
      summary: Count instances of the model matched by where from the data source.
      operationId: group.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /roles:
    post:
      tags:
        - role
      summary: Create a new instance of the model and persist it into the data source.
      operationId: role.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
    put:
      tags:
        - role
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: role.upsert__put_roles
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
    patch:
      tags:
        - role
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: role.upsert__patch_roles
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
    get:
      tags:
        - role
      summary: Find all instances of the model matched by filter from the data source.
      operationId: role.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/role'
      deprecated: false
  /roles/replaceOrCreate:
    post:
      tags:
        - role
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: role.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
  /roles/upsertWithWhere:
    post:
      tags:
        - role
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: role.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
  '/roles/{id}/exists':
    get:
      tags:
        - role
      summary: Check whether a model instance exists in the data source.
      operationId: 'role.exists__get_roles_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/roles/{id}':
    head:
      tags:
        - role
      summary: Check whether a model instance exists in the data source.
      operationId: 'role.exists__head_roles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - role
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: role.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
    delete:
      tags:
        - role
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: role.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - role
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'role.prototype.updateAttributes__put_roles_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/role'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
    patch:
      tags:
        - role
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'role.prototype.updateAttributes__patch_roles_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/role'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
  '/roles/{id}/replace':
    post:
      tags:
        - role
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: role.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
  /roles/findOne:
    get:
      tags:
        - role
      summary: Find first instance of the model matched by filter from the data source.
      operationId: role.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/role'
      deprecated: false
  /roles/update:
    post:
      tags:
        - role
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: role.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/role'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /roles/count:
    get:
      tags:
        - role
      summary: Count instances of the model matched by where from the data source.
      operationId: role.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tabsets:
    post:
      tags:
        - tabset
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tabset.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tabset'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tabset'
      deprecated: false
    put:
      tags:
        - tabset
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tabset.upsert__put_tabsets
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tabset'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tabset'
      deprecated: false
    patch:
      tags:
        - tabset
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tabset.upsert__patch_tabsets
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tabset'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tabset'
      deprecated: false
    get:
      tags:
        - tabset
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tabset.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tabset'
      deprecated: false
  /tabsets/replaceOrCreate:
    post:
      tags:
        - tabset
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tabset.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tabset'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tabset'
      deprecated: false
  /tabsets/upsertWithWhere:
    post:
      tags:
        - tabset
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tabset.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tabset'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tabset'
      deprecated: false
  '/tabsets/{id}/exists':
    get:
      tags:
        - tabset
      summary: Check whether a model instance exists in the data source.
      operationId: 'tabset.exists__get_tabsets_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tabsets/{id}':
    head:
      tags:
        - tabset
      summary: Check whether a model instance exists in the data source.
      operationId: 'tabset.exists__head_tabsets_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tabset
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tabset.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tabset'
      deprecated: false
    delete:
      tags:
        - tabset
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tabset.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - tabset
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'tabset.prototype.updateAttributes__put_tabsets_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tabset'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tabset'
      deprecated: false
    patch:
      tags:
        - tabset
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'tabset.prototype.updateAttributes__patch_tabsets_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tabset'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tabset'
      deprecated: false
  '/tabsets/{id}/replace':
    post:
      tags:
        - tabset
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: tabset.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tabset'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tabset'
      deprecated: false
  /tabsets/findOne:
    get:
      tags:
        - tabset
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tabset.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tabset'
      deprecated: false
  /tabsets/update:
    post:
      tags:
        - tabset
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tabset.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tabset'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tabsets/count:
    get:
      tags:
        - tabset
      summary: Count instances of the model matched by where from the data source.
      operationId: tabset.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /roleMembers:
    post:
      tags:
        - roleMember
      summary: Create a new instance of the model and persist it into the data source.
      operationId: roleMember.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/roleMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMember'
      deprecated: false
    put:
      tags:
        - roleMember
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: roleMember.upsert__put_roleMembers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/roleMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMember'
      deprecated: false
    patch:
      tags:
        - roleMember
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: roleMember.upsert__patch_roleMembers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/roleMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMember'
      deprecated: false
    get:
      tags:
        - roleMember
      summary: Find all instances of the model matched by filter from the data source.
      operationId: roleMember.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/roleMember'
      deprecated: false
  /roleMembers/replaceOrCreate:
    post:
      tags:
        - roleMember
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: roleMember.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/roleMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMember'
      deprecated: false
  /roleMembers/upsertWithWhere:
    post:
      tags:
        - roleMember
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: roleMember.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/roleMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMember'
      deprecated: false
  '/roleMembers/{id}/exists':
    get:
      tags:
        - roleMember
      summary: Check whether a model instance exists in the data source.
      operationId: 'roleMember.exists__get_roleMembers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/roleMembers/{id}':
    head:
      tags:
        - roleMember
      summary: Check whether a model instance exists in the data source.
      operationId: 'roleMember.exists__head_roleMembers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - roleMember
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: roleMember.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMember'
      deprecated: false
    delete:
      tags:
        - roleMember
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: roleMember.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - roleMember
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'roleMember.prototype.updateAttributes__put_roleMembers_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/roleMember'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMember'
      deprecated: false
    patch:
      tags:
        - roleMember
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'roleMember.prototype.updateAttributes__patch_roleMembers_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/roleMember'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMember'
      deprecated: false
  '/roleMembers/{id}/replace':
    post:
      tags:
        - roleMember
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: roleMember.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/roleMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMember'
      deprecated: false
  /roleMembers/findOne:
    get:
      tags:
        - roleMember
      summary: Find first instance of the model matched by filter from the data source.
      operationId: roleMember.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/roleMember'
      deprecated: false
  /roleMembers/update:
    post:
      tags:
        - roleMember
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: roleMember.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/roleMember'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /roleMembers/count:
    get:
      tags:
        - roleMember
      summary: Count instances of the model matched by where from the data source.
      operationId: roleMember.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /groupMembers:
    post:
      tags:
        - groupMember
      summary: Create a new instance of the model and persist it into the data source.
      operationId: groupMember.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/groupMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/groupMember'
      deprecated: false
    put:
      tags:
        - groupMember
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: groupMember.upsert__put_groupMembers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/groupMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/groupMember'
      deprecated: false
    patch:
      tags:
        - groupMember
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: groupMember.upsert__patch_groupMembers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/groupMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/groupMember'
      deprecated: false
    get:
      tags:
        - groupMember
      summary: Find all instances of the model matched by filter from the data source.
      operationId: groupMember.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/groupMember'
      deprecated: false
  /groupMembers/replaceOrCreate:
    post:
      tags:
        - groupMember
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: groupMember.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/groupMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/groupMember'
      deprecated: false
  /groupMembers/upsertWithWhere:
    post:
      tags:
        - groupMember
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: groupMember.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/groupMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/groupMember'
      deprecated: false
  '/groupMembers/{id}/exists':
    get:
      tags:
        - groupMember
      summary: Check whether a model instance exists in the data source.
      operationId: 'groupMember.exists__get_groupMembers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/groupMembers/{id}':
    head:
      tags:
        - groupMember
      summary: Check whether a model instance exists in the data source.
      operationId: 'groupMember.exists__head_groupMembers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - groupMember
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: groupMember.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/groupMember'
      deprecated: false
    delete:
      tags:
        - groupMember
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: groupMember.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - groupMember
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'groupMember.prototype.updateAttributes__put_groupMembers_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/groupMember'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/groupMember'
      deprecated: false
    patch:
      tags:
        - groupMember
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'groupMember.prototype.updateAttributes__patch_groupMembers_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/groupMember'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/groupMember'
      deprecated: false
  '/groupMembers/{id}/replace':
    post:
      tags:
        - groupMember
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: groupMember.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/groupMember'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/groupMember'
      deprecated: false
  /groupMembers/findOne:
    get:
      tags:
        - groupMember
      summary: Find first instance of the model matched by filter from the data source.
      operationId: groupMember.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/groupMember'
      deprecated: false
  /groupMembers/update:
    post:
      tags:
        - groupMember
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: groupMember.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/groupMember'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /groupMembers/count:
    get:
      tags:
        - groupMember
      summary: Count instances of the model matched by where from the data source.
      operationId: groupMember.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /permissions:
    post:
      tags:
        - permission
      summary: Create a new instance of the model and persist it into the data source.
      operationId: permission.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/permission'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permission'
      deprecated: false
    put:
      tags:
        - permission
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: permission.upsert__put_permissions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/permission'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permission'
      deprecated: false
    patch:
      tags:
        - permission
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: permission.upsert__patch_permissions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/permission'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permission'
      deprecated: false
    get:
      tags:
        - permission
      summary: Find all instances of the model matched by filter from the data source.
      operationId: permission.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/permission'
      deprecated: false
  /permissions/replaceOrCreate:
    post:
      tags:
        - permission
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: permission.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/permission'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permission'
      deprecated: false
  /permissions/upsertWithWhere:
    post:
      tags:
        - permission
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: permission.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/permission'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permission'
      deprecated: false
  '/permissions/{id}/exists':
    get:
      tags:
        - permission
      summary: Check whether a model instance exists in the data source.
      operationId: 'permission.exists__get_permissions_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/permissions/{id}':
    head:
      tags:
        - permission
      summary: Check whether a model instance exists in the data source.
      operationId: 'permission.exists__head_permissions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - permission
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: permission.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permission'
      deprecated: false
    delete:
      tags:
        - permission
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: permission.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - permission
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'permission.prototype.updateAttributes__put_permissions_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/permission'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permission'
      deprecated: false
    patch:
      tags:
        - permission
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'permission.prototype.updateAttributes__patch_permissions_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/permission'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permission'
      deprecated: false
  '/permissions/{id}/replace':
    post:
      tags:
        - permission
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: permission.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/permission'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permission'
      deprecated: false
  /permissions/findOne:
    get:
      tags:
        - permission
      summary: Find first instance of the model matched by filter from the data source.
      operationId: permission.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permission'
      deprecated: false
  /permissions/update:
    post:
      tags:
        - permission
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: permission.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/permission'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /permissions/count:
    get:
      tags:
        - permission
      summary: Count instances of the model matched by where from the data source.
      operationId: permission.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tabs:
    post:
      tags:
        - tab
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tab.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tab'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tab'
      deprecated: false
    put:
      tags:
        - tab
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tab.upsert__put_tabs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tab'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tab'
      deprecated: false
    patch:
      tags:
        - tab
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tab.upsert__patch_tabs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tab'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tab'
      deprecated: false
    get:
      tags:
        - tab
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tab.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tab'
      deprecated: false
  /tabs/replaceOrCreate:
    post:
      tags:
        - tab
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tab.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tab'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tab'
      deprecated: false
  /tabs/upsertWithWhere:
    post:
      tags:
        - tab
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tab.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tab'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tab'
      deprecated: false
  '/tabs/{id}/exists':
    get:
      tags:
        - tab
      summary: Check whether a model instance exists in the data source.
      operationId: 'tab.exists__get_tabs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tabs/{id}':
    head:
      tags:
        - tab
      summary: Check whether a model instance exists in the data source.
      operationId: 'tab.exists__head_tabs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tab
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tab.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tab'
      deprecated: false
    delete:
      tags:
        - tab
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tab.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - tab
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'tab.prototype.updateAttributes__put_tabs_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tab'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tab'
      deprecated: false
    patch:
      tags:
        - tab
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'tab.prototype.updateAttributes__patch_tabs_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tab'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tab'
      deprecated: false
  '/tabs/{id}/replace':
    post:
      tags:
        - tab
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: tab.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tab'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tab'
      deprecated: false
  /tabs/findOne:
    get:
      tags:
        - tab
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tab.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tab'
      deprecated: false
  /tabs/update:
    post:
      tags:
        - tab
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tab.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tab'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tabs/count:
    get:
      tags:
        - tab
      summary: Count instances of the model matched by where from the data source.
      operationId: tab.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /friendships:
    post:
      tags:
        - friendship
      summary: Create a new instance of the model and persist it into the data source.
      operationId: friendship.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/friendship'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/friendship'
      deprecated: false
    put:
      tags:
        - friendship
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: friendship.upsert__put_friendships
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/friendship'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/friendship'
      deprecated: false
    patch:
      tags:
        - friendship
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: friendship.upsert__patch_friendships
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/friendship'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/friendship'
      deprecated: false
    get:
      tags:
        - friendship
      summary: Find all instances of the model matched by filter from the data source.
      operationId: friendship.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/friendship'
      deprecated: false
  /friendships/replaceOrCreate:
    post:
      tags:
        - friendship
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: friendship.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/friendship'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/friendship'
      deprecated: false
  /friendships/upsertWithWhere:
    post:
      tags:
        - friendship
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: friendship.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/friendship'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/friendship'
      deprecated: false
  '/friendships/{id}/exists':
    get:
      tags:
        - friendship
      summary: Check whether a model instance exists in the data source.
      operationId: 'friendship.exists__get_friendships_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/friendships/{id}':
    head:
      tags:
        - friendship
      summary: Check whether a model instance exists in the data source.
      operationId: 'friendship.exists__head_friendships_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - friendship
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: friendship.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/friendship'
      deprecated: false
    delete:
      tags:
        - friendship
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: friendship.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - friendship
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'friendship.prototype.updateAttributes__put_friendships_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/friendship'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/friendship'
      deprecated: false
    patch:
      tags:
        - friendship
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'friendship.prototype.updateAttributes__patch_friendships_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/friendship'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/friendship'
      deprecated: false
  '/friendships/{id}/replace':
    post:
      tags:
        - friendship
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: friendship.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/friendship'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/friendship'
      deprecated: false
  /friendships/findOne:
    get:
      tags:
        - friendship
      summary: Find first instance of the model matched by filter from the data source.
      operationId: friendship.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/friendship'
      deprecated: false
  /friendships/update:
    post:
      tags:
        - friendship
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: friendship.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/friendship'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /friendships/count:
    get:
      tags:
        - friendship
      summary: Count instances of the model matched by where from the data source.
      operationId: friendship.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /people:
    post:
      tags:
        - person
      summary: Create a new instance of the model and persist it into the data source.
      operationId: person.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
    put:
      tags:
        - person
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: person.upsert__put_people
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
    patch:
      tags:
        - person
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: person.upsert__patch_people
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
    get:
      tags:
        - person
      summary: Find all instances of the model matched by filter from the data source.
      operationId: person.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/person'
      deprecated: false
  /people/replaceOrCreate:
    post:
      tags:
        - person
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: person.replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
  /people/upsertWithWhere:
    post:
      tags:
        - person
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: person.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
  '/people/{id}/exists':
    get:
      tags:
        - person
      summary: Check whether a model instance exists in the data source.
      operationId: 'person.exists__get_people_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/people/{id}':
    head:
      tags:
        - person
      summary: Check whether a model instance exists in the data source.
      operationId: 'person.exists__head_people_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - person
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: person.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
    delete:
      tags:
        - person
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: person.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - person
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'person.prototype.updateAttributes__put_people_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/person'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
    patch:
      tags:
        - person
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: 'person.prototype.updateAttributes__patch_people_{id}'
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/person'
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
  '/people/{id}/replace':
    post:
      tags:
        - person
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: person.replaceById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/person'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
  /people/findOne:
    get:
      tags:
        - person
      summary: Find first instance of the model matched by filter from the data source.
      operationId: person.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/person'
      deprecated: false
  /people/update:
    post:
      tags:
        - person
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: person.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/person'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /people/count:
    get:
      tags:
        - person
      summary: Count instances of the model matched by where from the data source.
      operationId: person.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /people/login:
    post:
      tags:
        - person
      summary: Login a user with username/email and password.
      operationId: person.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /people/logout:
    post:
      tags:
        - person
      summary: Logout a user with access token.
      operationId: person.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /people/confirm:
    get:
      tags:
        - person
      summary: Confirm a user registration with email verification token.
      operationId: person.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /people/reset:
    post:
      tags:
        - person
      summary: Reset password for a user with email.
      operationId: person.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
definitions:
  group:
    properties:
      logoUrl:
        description: URL of icon image
        type: string
      name:
        description: Group name
        type: string
      url:
        description: 'Group''s official website, if applicable'
        type: string
      parentGroupId:
        description: ID of group that this group is a child of
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - name
    additionalProperties: false
  x-any:
    properties: {}
  role:
    properties:
      logoUrl:
        description: URL of icon image
        type: string
      name:
        description: Role name
        type: string
      ownerGroupId:
        description: ID of group that contains role (if applicable)
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - name
    additionalProperties: false
  tabset:
    properties:
      logoUrl:
        description: URL of icon image
        type: string
      name:
        description: Tabset name
        type: string
      cloneOfTabsetid:
        description: ID of tabset that this tabset is a clone of
        type: string
      ownerPersonId:
        description: ID of person that owns this tabset (if applicable)
        type: string
      ownerGroupId:
        description: ID of group that owns this tabset (if applicable)
        type: string
      ownerRoleId:
        description: ID of role that owns this tabset (if applicable)
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - name
    additionalProperties: false
  roleMember:
    properties:
      memberPersonId:
        description: ID of person that is a member of role
        type: string
      memberOfRoleId:
        description: ID of role that person is a member of
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  groupMember:
    properties:
      memberPersonId:
        description: ID of person that is a member of group
        type: string
      memberOfGroupId:
        description: ID of group that person is a member of
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - memberPersonId
      - memberOfGroupId
    additionalProperties: false
  permission:
    properties:
      type:
        description: 'Permission type (eg. READ, WRITE, GRANT, MASTER_READ, etc)'
        type: string
      ownerGroupMemberId:
        description: ID of group member containing this permission (if applicable)
        type: string
      ownerRoleMemberId:
        description: ID of role member containing this permission (if applicable)
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - type
    additionalProperties: false
  tab:
    properties:
      logoUrl:
        description: URL of icon image
        type: string
      name:
        description: Website name
        type: string
      url:
        description: Tab website
        type: string
      ownerTabsetId:
        description: ID of tabset that contains this tab
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - url
    additionalProperties: false
  friendship:
    properties:
      fromPersonId:
        description: ID of person this friendship is from
        type: string
      toPersonId:
        description: ID of person this friendship is to
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - fromPersonId
      - toPersonId
    additionalProperties: false
  person:
    properties:
      name:
        description: User's full name
        type: string
      logoUrl:
        description: URL of icon image
        type: string
      realm:
        type: string
      username:
        type: string
      credentials:
        type: object
      challenges:
        type: object
      email:
        type: string
      emailVerified:
        type: boolean
      status:
        type: string
      created:
        type: string
        format: date
      lastUpdated:
        type: string
        format: date
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - name
      - email
    additionalProperties: false
  ObjectID:
    type: string
    pattern: '^[a-fA-F\d]{24}$'
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: netjumpio-tabs-api
  version: 1.0.0
  title: netjumpio-tabs-api
schemes:
  - http
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
